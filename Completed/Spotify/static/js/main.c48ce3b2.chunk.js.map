{"version":3,"sources":["Components/App/background_photo_desktop.jpg","util/Spotify.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/Playlist/Playlist.js","Components/SearchBar/SearchBar.js","Components/SearchResults/SearchResults.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","accessToken","Track","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addTrack","bind","assertThisInitialized","removeTrack","isRemoval","react_default","a","createElement","onClick","className","onAdd","track","onRemove","Name","Artist","Album","renderAction","React","Component","TrackList","tracks","map","Components_Track_Track","key","id","Playlist","handleNameChange","event","onNameChange","target","value","onChange","defaultValue","Components_TrackList_TrackList","playlistTracks","onSave","SearchBar","state","term","search","handleTermChange","onSearch","preventDefault","setState","placeholder","SearchResults","searchResults","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","concat","savePlaylist","playlistName","trackURIs","userID","headers","Authorization","length","fetch","then","response","json","jsonResponse","method","body","JSON","stringify","name","playlistID","uris","searchTerm","items","ID","artists","album","URI","uri","App","updatePlaylistName","_this2","_this3","console","log","find","savedTrack","push","filter","currentTrack","Components_SearchBar_SearchBar","Components_SearchResults_SearchResults","Components_Playlist_Playlist","Boolean","hostname","ReactDOM","render","Components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0IAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0MCApCC,oFCyCWC,6CApCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,SAAWP,EAAKO,SAASC,KAAdP,OAAAQ,EAAA,EAAAR,CAAAD,IAChBA,EAAKU,YAAcV,EAAKU,YAAYF,KAAjBP,OAAAQ,EAAA,EAAAR,CAAAD,IAJFA,8EAQjB,OAAIG,KAAKJ,MAAMY,UACNC,EAAAC,EAAAC,cAAA,UAAQC,QAASZ,KAAKO,YAAaM,UAAU,gBAA7C,KAEAJ,EAAAC,EAAAC,cAAA,UAAQC,QAASZ,KAAKI,SAAUS,UAAU,gBAA1C,wCAKTb,KAAKJ,MAAMkB,MAAMd,KAAKJ,MAAMmB,6CAI5Bf,KAAKJ,MAAMoB,SAAShB,KAAKJ,MAAMmB,wCAI/B,OACEN,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBACbJ,EAAAC,EAAAC,cAAA,UAAKX,KAAKJ,MAAMmB,MAAME,MACtBR,EAAAC,EAAAC,cAAA,SAAIX,KAAKJ,MAAMmB,MAAMG,OAArB,MAAgClB,KAAKJ,MAAMmB,MAAMI,QAElDnB,KAAKoB,uBAhCMC,IAAMC,YCiBXC,mLAfH,IAAA1B,EAAAG,KACR,OACES,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aAEXb,KAAKJ,MAAM4B,OAAOC,IAAI,SAAAV,GACpB,OACEN,EAAAC,EAAAC,cAACe,EAAD,CAAOV,SAAUnB,EAAKD,MAAMoB,SAAUR,UAAWX,EAAKD,MAAMY,UAAWM,MAAOjB,EAAKD,MAAMkB,MAAOa,IAAKZ,EAAMa,GAAIb,MAAOA,cAP5GM,IAAMC,WCuBfO,cArBb,SAAAA,EAAYjC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6B,IACjBhC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+B,GAAA1B,KAAAH,KAAMJ,KAEDkC,iBAAmBjC,EAAKiC,iBAAiBzB,KAAtBP,OAAAQ,EAAA,EAAAR,CAAAD,IAHPA,gFAMFkC,GACf/B,KAAKJ,MAAMoC,aAAaD,EAAME,OAAOC,wCAIrC,OACEzB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAAA,SAAOwB,SAAUnC,KAAK8B,iBAAkBM,aAAc,iBACtD3B,EAAAC,EAAAC,cAAC0B,EAAD,CAAW7B,WAAW,EAAMQ,SAAUhB,KAAKJ,MAAMoB,SAAUQ,OAAQxB,KAAKJ,MAAM0C,iBAC9E7B,EAAAC,EAAAC,cAAA,UAAQC,QAASZ,KAAKJ,MAAM2C,OAAQ1B,UAAU,iBAA9C,2BAjBeQ,IAAMC,WC+BdkB,qBA9Bb,SAAAA,EAAY5C,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwC,IACjB3C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0C,GAAArC,KAAAH,KAAMJ,KAED6C,MAAQ,CACXC,KAAK,IAGP7C,EAAK8C,OAAS9C,EAAK8C,OAAOtC,KAAZP,OAAAQ,EAAA,EAAAR,CAAAD,IACdA,EAAK+C,iBAAmB/C,EAAK+C,iBAAiBvC,KAAtBP,OAAAQ,EAAA,EAAAR,CAAAD,IARPA,sEAWbkC,GACN/B,KAAKJ,MAAMiD,SAAS7C,KAAKyC,MAAMC,MAC/BX,EAAMe,0DAGSf,GACf/B,KAAK+C,SAAS,CAACL,KAAMX,EAAME,OAAOC,yCAIhC,OACEzB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,SAAOwB,SAAUnC,KAAK4C,iBAAkBI,YAAY,mCACpDvC,EAAAC,EAAAC,cAAA,UAAQC,QAASZ,KAAK2C,OAAQ9B,UAAU,gBAAxC,kBA1BgBQ,IAAMC,YCYf2B,0LATX,OACExC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAC0B,EAAD,CAAWvB,MAAOd,KAAKJ,MAAMkB,MAAON,WAAW,EAAOgB,OAAQxB,KAAKJ,MAAMsD,wBALrD7B,IAAMC,YLC5B6B,EAAU,CAEZC,eAFY,WAGV,GAAI1D,EACF,OAAOA,EAGT,IAAM2D,EAAmBC,OAAOC,SAASC,KAAKC,MAAM,wBAC9CC,EAAiBJ,OAAOC,SAASC,KAAKC,MAAM,sBAElD,GAAIJ,GAAoBK,EAAe,CACrChE,EAAc2D,EAAiB,GAC/B,IAAMM,EAAYC,OAAOF,EAAe,IAGxC,OAFAJ,OAAOO,WAAW,kBAAMnE,EAAc,IAAgB,IAAZiE,GAC1CL,OAAOQ,QAAQC,UAAU,eAAgB,KAAM,KACxCrE,EAGT4D,OAAOC,SAAP,oDAAAS,OAtBY,mCAsBZ,mEAAAA,OArBe,wDAyBjBC,aAtBY,SAsBCC,EAAcC,GAEzB,IAIIC,EAHEC,EAAU,CACdC,cAAe,UAFGnB,EAAQC,kBAM5B,GAAKc,GAAiBC,EAAUI,OAIhC,OAAOC,MAAK,gCAAiC,CAC3CH,QAASA,IACRI,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC3BF,KAAK,SAAAG,GAGH,OAFAR,EAASQ,EAAahD,GAEf4C,MAAK,oCAAAR,OAAqCI,EAArC,cAAyD,CAC/DC,QAASA,EACTQ,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAACC,KAAMf,MACzBO,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC3BF,KAAK,SAAAG,GACL,IAAMM,EAAaN,EAAahD,GAEhC,OAAO4C,MAAK,wCAAAR,OAAyCkB,EAAzC,WAA8D,CACpEb,QAASA,EACTQ,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAACG,KAAMhB,WAS9CxB,OA5DU,SA4DHyC,GACL,OAAOZ,MAAK,kDAAAR,OAAmDoB,GAAa,CAC1Ef,QAAS,CACPC,cAAa,UAAAN,OAAYb,EAAQC,qBAElCqB,KAAK,SAAAC,GACN,OAAOA,EAASC,SACfF,KAAK,SAAAG,GAEN,OAAKA,EAAapD,OAGToD,EAAapD,OAAO6D,MAAM5D,IAAI,SAAAV,GAAK,MAAK,CAC7CuE,GAAIvE,EAAMa,GACVX,KAAMF,EAAMkE,KACZ/D,OAAQH,EAAMwE,QAAQ,GAAGN,KACzB9D,MAAOJ,EAAMyE,MAAMP,KACnBQ,IAAK1E,EAAM2E,OAPN,OAoBJvC,IMXAwC,cA1Eb,SAAAA,EAAY/F,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2F,IAChB9F,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6F,GAAAxF,KAAAH,KAAMJ,KAED6C,MAAQ,CACXS,cAAe,GACfgB,aAAc,GACd5B,eAAgB,IAGlBzC,EAAKO,SAAWP,EAAKO,SAASC,KAAdP,OAAAQ,EAAA,EAAAR,CAAAD,IAChBA,EAAKU,YAAcV,EAAKU,YAAYF,KAAjBP,OAAAQ,EAAA,EAAAR,CAAAD,IACnBA,EAAK+F,mBAAqB/F,EAAK+F,mBAAmBvF,KAAxBP,OAAAQ,EAAA,EAAAR,CAAAD,IAC1BA,EAAKoE,aAAepE,EAAKoE,aAAa5D,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IACpBA,EAAK8C,OAAS9C,EAAK8C,OAAOtC,KAAZP,OAAAQ,EAAA,EAAAR,CAAAD,IAbEA,sEAgBXuF,GAAY,IAAAS,EAAA7F,KACfmD,EAAQR,OAAOyC,GAAYX,KAAK,SAAAvB,GAC9B2C,EAAK9C,SAAS,CAACG,cAAcA,6CAIpB,IAAA4C,EAAA9F,KACPmE,EAAYnE,KAAKyC,MAAMH,eAAeb,IAAI,SAAAV,GAAK,OAAIA,EAAM0E,MAC/DM,QAAQC,IAAI7B,GAEZhB,EAAQc,aAAajE,KAAKyC,MAAMyB,aAAcC,GAAWM,KAAK,WAC5DqB,EAAK/C,SAAS,CACZmB,aAAc,eACd5B,eAAgB,wCAKbvB,GACP,IAAIS,EAASxB,KAAKyC,MAAMH,eACpBd,EAAOyE,KAAK,SAAAC,GAAU,OAAIA,EAAWZ,KAAOvE,EAAMuE,OAItD9D,EAAO2E,KAAKpF,GAEZf,KAAK+C,SAAS,CAACT,eAAed,yCAIpBT,GACV,IAAIS,EAASxB,KAAKyC,MAAMH,eACxBd,EAASA,EAAO4E,OAAO,SAAAC,GAAY,OAAIA,EAAaf,KAAOvE,EAAMuE,KACjEtF,KAAK+C,SAAS,CAACT,eAAed,+CAKbyD,GACjBjF,KAAK+C,SAAS,CAACmB,aAAae,qCAI9B,OACExE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAAC2F,EAAD,CAAWzD,SAAU7C,KAAK2C,SAC5BlC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACbJ,EAAAC,EAAAC,cAAC4F,EAAD,CAAezF,MAAOd,KAAKI,SAAU8C,cAAelD,KAAKyC,MAAMS,gBAC/DzC,EAAAC,EAAAC,cAAC6F,EAAD,CAAUjE,OAAQvC,KAAKiE,aAAcjC,aAAchC,KAAK4F,mBAAoB5E,SAAUhB,KAAKO,YAAa2D,aAAclE,KAAKyC,MAAMyB,aAAc5B,eAAgBtC,KAAKyC,MAAMH,2BApElKjB,IAAMC,WCIJmF,QACW,cAA7BnD,OAAOC,SAASmD,UAEe,UAA7BpD,OAAOC,SAASmD,UAEhBpD,OAAOC,SAASmD,SAASjD,MACvB,2DCZNkD,IAASC,OAAOnG,EAAAC,EAAAC,cAACkG,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,KAAK,SAAA0C,GACjCA,EAAaC","file":"static/js/main.c48ce3b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background_photo_desktop.f2a59d08.jpg\";","let accessToken;\r\nconst CLIENT_ID = 'b89bb1d56c744e82973c507abc904d5c';\r\nconst REDIRECT_URI = 'http://vladcancode.com/Completed/Spotify/index.html';\r\n//'http://localhost:3000/';\r\n\r\nconst Spotify = {\r\n\r\n    getAccessToken() {\r\n      if (accessToken){\r\n        return accessToken;\r\n      }\r\n\r\n      const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n      const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n      if (accessTokenMatch && expiresInMatch){\r\n        accessToken = accessTokenMatch[1];\r\n        const expiresIn = Number(expiresInMatch[1]);\r\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n        window.history.pushState('Access Token', null, '/');\r\n        return accessToken;\r\n      }\r\n\r\n      window.location = `https://accounts.spotify.com/authorize?client_id=${CLIENT_ID}&response_type=token&scope=playlist-modify-public&redirect_uri=${REDIRECT_URI}`;\r\n\r\n    },\r\n\r\n    savePlaylist(playlistName, trackURIs) {\r\n\r\n      const accessToken = Spotify.getAccessToken();\r\n      const headers = {\r\n        Authorization: 'Bearer ' + accessToken\r\n      }\r\n      let userID;\r\n\r\n      if (!playlistName || !trackURIs.length) {\r\n        return;\r\n      }\r\n\r\n      return fetch(`https://api.spotify.com/v1/me`,{\r\n        headers: headers\r\n      }).then(response => response.json()\r\n      ).then(jsonResponse => {\r\n          userID = jsonResponse.id;\r\n\r\n          return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({name: playlistName})\r\n                }).then(response => response.json()\r\n                ).then(jsonResponse => {\r\n                  const playlistID = jsonResponse.id;\r\n\r\n                  return fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks`, {\r\n                        headers: headers,\r\n                        method: 'POST',\r\n                        body: JSON.stringify({uris: trackURIs})\r\n                        })\r\n                  });\r\n          });\r\n\r\n        }\r\n\r\n    ,\r\n\r\n      search(searchTerm) {\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${searchTerm}`,{\r\n          headers: {\r\n            Authorization: `Bearer ${Spotify.getAccessToken()}`\r\n          }\r\n        }).then(response => {\r\n          return response.json();\r\n        }).then(jsonResponse => {\r\n\r\n          if (!jsonResponse.tracks){\r\n            return [];\r\n          }else{\r\n            return jsonResponse.tracks.items.map(track => ({\r\n              ID: track.id,\r\n              Name: track.name,\r\n              Artist: track.artists[0].name,\r\n              Album: track.album.name,\r\n              URI: track.uri\r\n            }))\r\n          }\r\n          })\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default Spotify;\r\n","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n  }\r\n\r\n  renderAction() {\r\n    if (this.props.isRemoval){\r\n      return <button onClick={this.removeTrack} className=\"Track-action\">-</button>\r\n    }else{\r\n      return <button onClick={this.addTrack} className=\"Track-action\">+</button>\r\n    }\r\n  }\r\n\r\n  addTrack() {\r\n    this.props.onAdd(this.props.track)\r\n  }\r\n\r\n  removeTrack() {\r\n    this.props.onRemove(this.props.track)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"Track\">\r\n        <div className=\"Track-information\">\r\n          <h3>{this.props.track.Name}</h3>\r\n          <p>{this.props.track.Artist} | {this.props.track.Album}</p>\r\n        </div>\r\n        {this.renderAction()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Track;\r\n","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track.js';\r\n\r\nclass TrackList extends React.Component {\r\n  render () {\r\n    return (\r\n      <div className=\"TrackList\">\r\n      {\r\n          this.props.tracks.map(track => {\r\n            return (\r\n              <Track onRemove={this.props.onRemove} isRemoval={this.props.isRemoval} onAdd={this.props.onAdd} key={track.id} track={track}/>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TrackList;\r\n","import React from 'react';\r\nimport './Playlist.css';\r\nimport  TrackList from '../TrackList/TrackList.js';\r\n\r\nclass Playlist extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n  }\r\n\r\n  handleNameChange(event) {\r\n    this.props.onNameChange(event.target.value)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Playlist\">\r\n        <input onChange={this.handleNameChange} defaultValue={'New Playlist'}/>\r\n        <TrackList isRemoval={true} onRemove={this.props.onRemove} tracks={this.props.playlistTracks}/>\r\n        <button onClick={this.props.onSave} className=\"Playlist-save\">SAVE TO SPOTIFY</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Playlist;\r\n","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component{\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      term:''\r\n    };\r\n\r\n    this.search = this.search.bind(this);\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n  }\r\n\r\nsearch (event){\r\n  this.props.onSearch(this.state.term);\r\n  event.preventDefault();\r\n}\r\n\r\nhandleTermChange(event) {\r\n  this.setState({term: event.target.value})\r\n}\r\n\r\n  render (){\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\r\n        <button onClick={this.search} className=\"SearchButton\">SEARCH</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\nimport './SearchResults.css';\r\nimport  TrackList from '../TrackList/TrackList.js';\r\n\r\nclass SearchResults extends React.Component{\r\n  render () {\r\n    return (\r\n      <div className=\"SearchResults\">\r\n        <h2>Results</h2>\r\n        <TrackList onAdd={this.props.onAdd} isRemoval={false} tracks={this.props.searchResults}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SearchResults;\r\n","import React, { Component } from 'react';\nimport logo from './background_photo_desktop.jpg';\nimport './App.css';\nimport Playlist from '../Playlist/Playlist.js';\nimport SearchBar from '../SearchBar/SearchBar.js';\nimport SearchResults from '../SearchResults/SearchResults.js';\nimport Spotify from '../../util/Spotify.js';\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: \"\",\n      playlistTracks: []\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  search(searchTerm) {\n      Spotify.search(searchTerm).then(searchResults => {\n        this.setState({searchResults:searchResults})\n      })\n  }\n\n  savePlaylist() {\n    const trackURIs = this.state.playlistTracks.map(track => track.URI);\n    console.log(trackURIs);\n\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    })\n  }\n\n  addTrack(track){\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.ID === track.ID)) {\n      return;\n    }\n\n    tracks.push(track);\n\n    this.setState({playlistTracks:tracks});\n    }\n\n\n  removeTrack(track){\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.ID !== track.ID);\n    this.setState({playlistTracks:tracks});\n\n    return;\n  }\n\n  updatePlaylistName(name){\n    this.setState({playlistName:name});\n  }\n\nrender(){\n  return (\n    <div>\n      <h1>vladcancode.com</h1>\n      <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n        <div className=\"App-playlist\">\n          <SearchResults onAdd={this.addTrack} searchResults={this.state.searchResults}/>\n          <Playlist onSave={this.savePlaylist} onNameChange={this.updatePlaylistName} onRemove={this.removeTrack} playlistName={this.state.playlistName} playlistTracks={this.state.playlistTracks}/>\n        </div>\n      </div>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}